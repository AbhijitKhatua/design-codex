/** @typedef {import('vue-docgen-api').ParamTag} ParamTag */

/** @type {import('vue-docgen-cli').Templates['component']} */
module.exports = function component( renderedUsage, doc ) {
	const { displayName, description, docsBlocks, tags } = doc;
	const { author, since, version } = /** @type {Record<string, ParamTag[]>} */ ( tags || {} );

	const frontMatter = [ 'sidebarDepth: 3' ];
	const componentName = displayName.slice( 3 );

	// Don't include a usage header if there are no properties, methods, events, or
	// slots to document
	const usageHeader = (
		renderedUsage.props !== '' ||
		renderedUsage.methods !== '' ||
		renderedUsage.events !== '' ||
		renderedUsage.slots !== ''
	) ? '## Usage' : '';

	/* eslint-disable @typescript-eslint/restrict-template-expressions */
	return `
---
# This file is automatically generated; do not edit it directly.
# Edit component demos in packages/codex-docs/component-demos.
${frontMatter.join( '\n' )}
---

# ${componentName}

${description || ''}

${author ? author.map( ( a ) => `**Author**: ${a.description}` ).join( '\n' ) : ''}
${since ? `**Since** ${since[ 0 ].description}` : ''}
${version ? `**Version** ${version[ 0 ].description}` : ''}

${docsBlocks ? docsBlocks.join( '\n---\n' ) : ''}

${usageHeader}

${renderedUsage.props.replace( '## Props', '### Props' )}
${renderedUsage.methods.replace( '## Methods', '### Methods' )}
${renderedUsage.events.replace( '## Events', '### Events' )}
${renderedUsage.slots.replace( '## Slots', '### Slots' )}
`;
};
