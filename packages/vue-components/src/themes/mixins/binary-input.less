@import 'wikimedia-ui-base/wikimedia-ui-base.less';

// TODO: At least these first few should be design tokens.
// FIXME: Vite doesn't like the way we calculated these values previously, e.g.
// 20 / @font-size-browser / @font-size-base. There might be a better solution than this one:
@font-size-browser: 16; // Common (assumed) browser default of `16px`.
@font-size-base-value: 14 / @font-size-browser;
@font-size-base: unit( ( @font-size-base-value ), em ); // Equals `0.875em` at browser default of `16px`.

@size-input-binary: unit( ( 20 / @font-size-browser / @font-size-base-value ), em );

@border-color-input-binary: @border-color-base--active;
@border-color-input-binary--checked: @color-primary;
@border-color-input-binary--hover: @color-primary--hover;
@border-color-input-binary--active: @color-primary--active;
@border-color-input-binary--focus: @color-primary--focus;
@border-width-input-radio--checked: unit( ( 6 / @font-size-browser / @font-size-base-value ), em );

@box-shadow-input-binary--focus: inset 0 0 0 1px @color-primary--focus;
@box-shadow-input-checkbox--focus-checked: @box-shadow-primary--focus;
@box-shadow-input-binary--active: inset 0 0 0 1px @color-primary--active;

// Common styles for checkboxes and radios.
.cdx-mixin-binary-input() {
	&:not( &--inline ) {
		display: block;
		// Since we have to use margin-right for inline inputs, use margin-bottom for stacked inputs
		// for consistency's sake.
		margin-bottom: 12px;

		&:last-child {
			margin-bottom: 0;
		}
	}

	&--inline {
		// Use margin-right instead of left to avoid extra space at the beginning of a new line if
		// the inputs span multiple lines.
		margin-right: 16px;
		// Avoid line break between icon and label text.
		white-space: nowrap;

		&:last-child {
			margin-right: 0;
		}

		// Target span with class ending in '__label-content'.
		span[ class$='__label-content' ] {
			// Reset to inline to avoid extra space between input and label.
			display: inline;
		}
	}

	&__label {
		// This makes single-line labels only the width of their content and properly aligns
		// multi-line labels with the input.
		display: inline-block;
		position: relative;
		// Create a stacking context.
		z-index: 0;
		line-height: @size-input-binary;
		cursor: pointer;

		&[ aria-disabled='true' ] {
			cursor: @cursor-base--disabled;
		}
	}

	&__label-content {
		// Necessary to ensure label is indented properly if it spans multiple lines.
		display: inline-block;
		padding-left: @size-input-binary + 0.5em;
	}

	// Custom-styled input that's visible to the user.
	&__icon {
		background-color: @background-color-base;
		position: absolute;
		left: 0;
		box-sizing: border-box;
		width: @size-input-binary;
		height: @size-input-binary;
		border: @border-width-base @border-style-base @border-color-input-binary;
	}

	// HTML input element.
	&__input {
		// The actual input is visually hidden.
		opacity: 0;
		position: absolute;
		left: 0;
		// Render "on top of" the span, so that it's still clickable.
		z-index: 1;
		width: @size-input-binary;
		height: @size-input-binary;
		// Support Blink, Firefox, Safari: Normalize by removing user-agent stylesheet `margin`.
		margin: 0;
		font-size: inherit;
		cursor: inherit;
	}
}
