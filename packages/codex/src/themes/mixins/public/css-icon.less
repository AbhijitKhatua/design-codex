@import ( reference ) '@wikimedia/codex-design-tokens/theme-wikimedia-ui.less';
@import ( reference ) '@wikimedia/codex-icons/dist/codex-icon-paths.less';

//
// To use an icon:
// - Import this file
// - Apply the .cdx-mixin-css-icon() mixin to the icon span
// - Use the .cdx-mixin-icon-background-image() mixin to apply the appropriate background image.
//   This mixin accounts for icons that vary by reading direction or language.
//
.cdx-mixin-css-icon() {
	background-position: @background-position-base;
	background-repeat: no-repeat;
	// Set background size to the relative @size-icon or to @min-size-icon, whichever is larger.
	// This ensures that the icon will never appear smaller than @min-size-icon.
	background-size: calc( max( @size-icon, @min-size-icon ) );
	display: inline-block;
	// Set the default icon size.
	min-width: @min-size-icon;
	min-height: @min-size-icon;
	// Scale width/height of the span with font size.
	width: @size-icon;
	height: @size-icon;
	// Vertically align surrounding text in inline, inline-block, and table contexts.
	vertical-align: text-bottom;
}

//
// Get a background image rule for an icon.
//
// Note that in RTL contexts, this mixin requires `dir="rtl"` either on the icon element itself
// or on the <html> element.
//
// This mixin takes in an icon, which is really a Less variable generated by the codex-icons
// package. These variables are lists of icon data that contain:
// 1. The default icon path (a string)
// 2. Whether the icon should flip in RTL ('true' or 'false')
// 3. Exceptions to the flip rule ('false' or a selector string that will rule out languages)
// 4. RTL-specific icon path ('false' or the path string)
// 5. Whether the icon has language-specific variants ('true' or 'false')
// 6+ If there are language-specific variants, they will be included as string pairs after the other
//   icon data. The first item in the pair is a lang code and the second is the icon path for that
//   language.
//
// @param {string} icon - The icon to show (follows the pattern @cdx-icon-icon-name, e.g. @cdx-icon-info-filled
// @param {hex} fill-color - The fill color of the icon (defaults to @color-base)
//
.cdx-mixin-icon-background-image( @param-icon, @param-fill-color: @color-base ) {
	// Extract icon data from the list.
	@default-icon: extract( @param-icon, 1 );
	@should-flip: extract( @param-icon, 2 );
	@flip-exceptions: extract( @param-icon, 3 );
	@rtl-icon: extract( @param-icon, 4 );
	@has-lang-variants: extract( @param-icon, 5 );

	// Escape the hash in the hex code before we use it in the background-image rule.
	@escaped-hex-code: escape( @param-fill-color );

	// Add default image.
	background-image: url( 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="@{escaped-hex-code}">@{default-icon}</svg>' );

	// Flip icons with no shouldFlip exceptions.
	& when ( @should-flip = 'true' ) and ( @flip-exceptions = 'false' ) {
		&[ dir='rtl' ],
		html[ dir='rtl' ] &:not( [ dir='ltr' ] ) {
			transform: scaleX( -1 );
		}
	}

	// Flip icons with shouldFlip exceptions.
	& when ( @should-flip = 'true' ) and not ( @flip-exceptions = 'false' ) {
		// Create a selector string out of each exception lang code.
		// Final selector will look like `:not( :lang( he ) ):not( :lang( yi ) )`
		@exceptions-selector: e( replace( @flip-exceptions, '(^| )([^ ]+)', ':not( :lang( $2 ) )', 'g' ) );

		&[ dir='rtl' ],
		html[ dir='rtl' ] &:not( [ dir='ltr' ] ) {
			&@{exceptions-selector} {
				transform: scaleX( -1 );
			}
		}
	}

	// If an icon has an RTL-specific icon, apply it.
	& when not ( @rtl-icon = 'false' ) {
		&[ dir='rtl' ],
		html[ dir='rtl' ] &:not( [ dir='ltr' ] ) {
			background-image: url( 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="@{escaped-hex-code}">@{rtl-icon}</svg>' );
		}
	}

	// Set language-specific icons.
	& when ( @has-lang-variants = 'true' ) {
		@icon-list-length: length( @param-icon );

		// Language-specific icons are represented by list items in @param-icon. They consist of a
		// lang code, e.g. ar, and an icon path.
		// Since we can't use modern Less features in MediaWiki, we need a recursive mixin.
		.get-lang-rules( @i: 6 ) when ( @i <= @icon-list-length ) {
			@lang-data: extract( @param-icon, @i );
			@lang-code: extract( @lang-data, 1 );
			@lang-icon: extract( @lang-data, 2 );

			&:lang( @{lang-code} ) {
				background-image: url( 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="@{escaped-hex-code}"> @{lang-icon}</svg>' );
			}
			.get-lang-rules( @i + 1 );
		}

		.get-lang-rules();
	}
}
